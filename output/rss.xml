<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>weigl::io</title><link>http://weigl-io.blogspot.com</link><description>&lt;a href="http://github.com/areku"&gt;github&lt;/a&gt; &lt;a href="http://www.stud.uni-karlsruhe.de/~uiduw/"&gt;Site@Kit&lt;/a&gt;</description><lastBuildDate>Sat, 31 Aug 2013 11:36:19 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Sidenotes with LaTex and Auctex</title><link>http://weigl-io.blogspot.com/posts/201305sidenotes-with-latex-and-auctex.html</link><description>&lt;p&gt;I often use the following Latex snippet for creating small notes (like paragraphs headings) for the reader's orientation:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;  \newcommand\sidenote[1]{\marginpar{{\small \textsf{\textbf{#1}}}}}&lt;/span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;This creates in the margin a smaller bolder sans-serif heading. If you want to hide this macro within the fold-mode of auctex, you need to adapt following list &lt;a href="http://www.gnu.org/software/auctex/manual/auctex/Folding.html"&gt;(see here)&lt;/a&gt;:&lt;br&gt;&lt;blockquote class="tr_bq"&gt; &lt;dl&gt;&lt;dt&gt;&lt;u&gt;User Option:&lt;/u&gt; &lt;b&gt;TeX-fold-macro-spec-list&lt;/b&gt;&lt;/dt&gt;&lt;dd&gt;List of replacement specifiers and macros to fold.  The specifier can be a string, an integer or a function symbol. &lt;br&gt; If you specify a string, it will be used as a display replacement for the whole macro.  Numbers in braces, brackets, parens or angle brackets will be replaced by the respective macro argument.  For example ‘&lt;samp&gt;{1}&lt;/samp&gt;’ will be replaced by the first mandatory argument of the macro.  One can also define alternatives within the specifier which are used if an argument is not found.  Alternatives are separated by ‘&lt;samp&gt;||&lt;/samp&gt;’.  They are most useful with optional arguments.  As an example, the default specifier for ‘&lt;samp&gt;\item&lt;/samp&gt;’ is ‘&lt;samp&gt;[1]:||*&lt;/samp&gt;’ which means that if there is an optional argument, its value is shown followed by a colon.  If there is no optional argument, only an asterisk is used as the display string. &lt;br&gt; If you specify a number as the first element, the content of the respective mandatory argument of a LaTeX macro will be used as the placeholder. &lt;br&gt; If the first element is a function symbol, the function will be called with all mandatory arguments of the macro and the result of the function call will be used as a replacement for the macro. &lt;br&gt; The placeholder is made by copying the text from the buffer together with its properties, i.e. its face as well.  If fontification has not happened when this is done (e.g. because of lazy font locking) the intended fontification will not show up.  As a workaround you can leave Emacs idle a few seconds and wait for stealth font locking to finish before you fold the buffer.  Or you just re-fold the buffer with &lt;code&gt;TeX-fold-buffer&lt;/code&gt; when you notice a wrong fontification. &lt;/dd&gt;&lt;/dl&gt;&lt;/blockquote&gt;&lt;br&gt;In our case we can need only to execute this:&lt;br&gt;&lt;blockquote class="tr_bq"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;span&gt;&lt;span style="font-size: x-small;"&gt;(add-to-list 'TeX-fold-macro-spec-list&lt;br&gt;                         '("[sidenote]" ("sidenote")))&lt;/span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;From the documentation you can derive this:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote class="tr_bq"&gt;&lt;span&gt;&lt;span style="font-size: x-small;"&gt;TeX-fold-macro-spec-list := ( specifier* )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;span style="font-size: x-small;"&gt;specifier                := ( {integer, symbol, string}&lt;br&gt;                              list-of-tex-macros)&lt;br&gt;list-of-tex-macros       := ( string* )&lt;/span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;If we pass a string, the macro (+ arguments) will be replaced in fold by this string. If we use "{n}" (or brackets, parens or angle brackets) the macro will be substitue by the n-th argument. The same as you use an integer value. An symbol with a bound function will be called by the macro mandatory arguments.&lt;br&gt;&lt;br&gt;Inspect for &lt;span&gt;&lt;span style="font-size: x-small;"&gt;TeX-fold-macro-spec-list &lt;/span&gt;&lt;/span&gt;more details: &lt;br&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;(("[f]"&lt;br&gt;    ("sidenote"))&lt;br&gt; ("[f]"&lt;br&gt;    ("footnote" "marginpar"))&lt;br&gt; ("[c]"&lt;br&gt;    ("cite"))&lt;br&gt; ("[l]"&lt;br&gt;    ("label"))&lt;br&gt; ("[r]"&lt;br&gt;    ("ref" "pageref" "eqref"))&lt;br&gt; ("[i]"&lt;br&gt;    ("index" "glossary"))&lt;br&gt; ("[1]:||*"&lt;br&gt;    ("item"))&lt;br&gt; ("..."&lt;br&gt;    ("dots"))&lt;br&gt; ("(C)"&lt;br&gt;    ("copyright"))&lt;br&gt; ("(R)"&lt;br&gt;    ("textregistered"))&lt;br&gt; ("TM"&lt;br&gt;    ("texttrademark"))&lt;br&gt; (1&lt;br&gt;    ("part" "chapter" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "part*" "chapter*" "section*" "subsection*" "subsubsection*" "paragraph*" "subparagraph*" "emph" "textit" "textsl" "textmd" "textrm" "textsf" "texttt" "textbf" "textsc" "textup")))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;</description><guid>http://weigl-io.blogspot.com/posts/201305sidenotes-with-latex-and-auctex.html</guid><pubDate>Sun, 26 May 2013 16:05:00 GMT</pubDate></item><item><title>Semester conclusion: 1 M.Sc. KIT</title><link>http://weigl-io.blogspot.com/posts/201304semestarabschluss-1-msc-kit.html</link><description>&lt;p&gt;Here my little conclusion of the last semester (WS12/13). My first semester at the Karlsruher Institute of Technology in the study path for M.Sc.&lt;br&gt;&lt;br&gt;My lectures were&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;table style="height: 90px; width: 673px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan="2"&gt;VF 1: Theoretische Grundlagen&lt;/td&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;b&gt;Advanced Datastructures&lt;/b&gt;&lt;br&gt;&lt;i&gt;should be deeper in the analytical section and show more techniques and tools than explizit data structures. BADS'13 was nice.&lt;/i&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;b&gt;Formale Systeme&lt;/b&gt;&lt;br&gt;&lt;i&gt;Stammmodule - very dry topic and a good pace at the end, where it get excited (Büchi-Automata and Model-Checking) &lt;/i&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="2"&gt;VF 14: Kognitive Systeme&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;b&gt;Automatische Sichtprüfung und Bildverarbeitung&lt;/b&gt;&lt;br&gt;&lt;i&gt;nice lecture, but the focus is to much into the optics and physics (computer scientist solve problems in the computer, not before)&lt;/i&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;b&gt;Einführung in die Informationsfusion&lt;/b&gt;&lt;br&gt;&lt;i&gt;My benefit was not to much during this lecture- very dry but involed docent. The last section - more interresting - get very short and the probabilistic methods get too long.&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;b&gt;Maschinelles Lernen I&lt;/b&gt;&lt;br&gt;&lt;i&gt;Too much topics, nothing in deep - but a nice overview&lt;/i&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="2"&gt;WF:&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Telematik&lt;/b&gt;&lt;br&gt;&lt;i&gt;"duty" lecture&lt;b&gt; - &lt;/b&gt;nearly the same content as Rechnernetze in the second semester.&lt;/i&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="2"&gt;EF: Biomedizinische Messtechnik&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Biomedizinische Messtechnik I&lt;/b&gt;&lt;br&gt;&lt;i&gt;should be interresting, but was boring - docent was not well prepared&lt;/i&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Bildgebende Verfahren der Medizin I&lt;/b&gt;&lt;br&gt;&lt;i&gt;a very fast speed during the lecture and high workload for 3 ECTS.&lt;/i&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;I visited courses for 32 ECTS. I did exam in 27 ECTS. &lt;br&gt;In conclusion: The workload is not presented in ECTS well. The exams are based upon powerpoint slides, so you learn stupid bullet points.</description><category>KIT</category><category>M.Sc</category><guid>http://weigl-io.blogspot.com/posts/201304semestarabschluss-1-msc-kit.html</guid><pubDate>Tue, 23 Apr 2013 23:04:00 GMT</pubDate></item><item><title>Dempster-Shafer-Theory</title><link>http://weigl-io.blogspot.com/posts/201304dempster-shafer-theory.html</link><description>&lt;p&gt;I got bored. The result is a lousy implementation of the dempster recombination rule (dcr) in dempster-shafer theory (dct).&lt;br&gt;&lt;br&gt;The dct describes system of base function to bind uncertainty to specific events (similar to Kolgomorov axioms). But the formulation of uncertainty is a kind easier.&lt;br&gt;&lt;br&gt;Let's say a sensor says&lt;i&gt; A&lt;/i&gt; occurred and we trust the sensor to 60 %. We can easily model this:&lt;br&gt;&lt;br&gt;$$m(A) = 0.6, m(\Omega) = 0.4$$&lt;br&gt;&lt;br&gt;The event got 0.6 certainty, the rest got the 0.4. Notice that $A \subset \Omega$ (That the difference to Kolgomorov).&lt;br&gt;The axioms of dct for completeness:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;$0 \le m(A) \le 1$ for every event A&lt;/li&gt;&lt;li&gt;$m(\emptyset) = 0$&lt;/li&gt;&lt;li&gt;$\sum_{A \subseteq \Omega} m(A) = 1$&lt;/li&gt;&lt;/ol&gt;The difference to Kolgomorov is the third axiom. In the normal probability  the sum over every distinct events $X$ must be the sum $P(X)$:&lt;br&gt;&lt;br&gt;$$P(\bigcup_i A_i) = \sum_{i} P(A_i)$$&lt;br&gt;&lt;br&gt;We can define base measures with dcr rule:&lt;br&gt;&lt;br&gt;$$m_1 \oplus m_2 (A) = \begin{cases}\frac{\sum_{X \cap Y = A} m_1(X)m_2(Y)}{1-\sum_{X \cap Y = 0} m_1(X)m_2(Y)}&amp;amp;else \\&lt;br&gt;0 &amp;amp; A = \emptyset&lt;br&gt;\end{cases} $$&lt;br&gt;&lt;br&gt;Additional we can define the function $Bel$ for the degree of believe resp. $Pl$ for plausibility. &lt;br&gt;&lt;br&gt;$$ Bel(A) = \sum_{X \subseteq A} m(x)$$ &lt;br&gt;$$ PlA) = \sum_{X \cap A \neq \emptyset} m(x)$$&lt;br&gt;&lt;br&gt;It follows: $0 \le Bel(A) \le Pl(A) \le 1$. You can divide the interval [0,1] into three parts:&lt;br&gt;&lt;ol&gt;&lt;li&gt;$[0,Bel(A)]$ describes certainty of event $A$&lt;/li&gt;&lt;li&gt;$[Bel(A), Pl(A)]$ describes the uncertainty of event $A$ &lt;/li&gt;&lt;li&gt;$[Pl(A), 1]$  describes certainty that the event $A$ does not occurred&lt;/li&gt;&lt;/ol&gt;&lt;br&gt; weigla@cook ~ % python drc.py&lt;br&gt;A: [m: 0.680000] [Bel 0.680000] [Pl 1.000000] ▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒&lt;br&gt;B: [m: 0.000000] [Bel 0.000000] [Pl 0.320000] ▒▒▒▒▒▒░░░░░░░░░░░░░░&lt;br&gt;C: [m: 0.000000] [Bel 0.000000] [Pl 0.320000] ▒▒▒▒▒▒░░░░░░░░░░░░░░&lt;br&gt;O: [m: 0.320000] [Bel 1.000000] [Pl 1.000000] ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;br&gt;&lt;br&gt;A: [m: 0.438596] [Bel 0.438596] [Pl 0.438596] ▓▓▓▓▓▓▓▓░░░░░░░░░░░░&lt;br&gt;B: [m: 0.210526] [Bel 0.000000] [Pl 0.000000] ░░░░░░░░░░░░░░░░░░░░&lt;br&gt;C: [m: 0.350877] [Bel 0.000000] [Pl 0.000000] ░░░░░░░░░░░░░░░░░░░░&lt;br&gt;O: [m: 0.000000] [Bel 0.438596] [Pl 0.438596] ▓▓▓▓▓▓▓▓░░░░░░░░░░░░&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#-*- encoding: utf-8 -*- &lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DictWrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;drc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;appl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;br&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;            &lt;br&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;appl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;appl&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Pl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;br&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Bel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;br&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="c"&gt;#events &lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;OMEGA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="c"&gt;#example: two sensors&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DictWrap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OMEGA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c"&gt;# s1 mesaures A with certainty of 60%&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DictWrap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OMEGA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c"&gt;# s2 mesaures A with certainty of 20%&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="c"&gt;#combine&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;fusion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;: [m: &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt;] [Bel &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt;] [Pl &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt;]'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br&gt;&lt;span class="n"&gt;fusion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;Bel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fusion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;br&gt;&lt;span class="n"&gt;Pl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fusion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;print_bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fusion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Pl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fusion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;fbel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;fpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fbel&lt;/span&gt; &lt;br&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fpl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fbel&lt;/span&gt; &lt;br&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fpl&lt;/span&gt; &lt;br&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'▓'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'▒'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'░'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'O'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OMEGA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="c"&gt;#combine &lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DictWrap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;fusion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fusion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'O'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OMEGA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;</description><category>mathjax</category><guid>http://weigl-io.blogspot.com/posts/201304dempster-shafer-theory.html</guid><pubDate>Fri, 05 Apr 2013 01:04:00 GMT</pubDate></item><item><title>Zyxel Routers visualize ADSL tones</title><link>http://weigl-io.blogspot.com/posts/201304a-little-python-script-to-visualize.html</link><description>&lt;p&gt;A little python script to visualize the quality of dsl tones from zyxel routers. Tested with O² DSL &amp;amp; Comfort (FW  RAS version: V3.40(AOF.5)D0 | 19.03.2009). Should work for all routers that supports wan adsl linedata {fear|near}.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class="c"&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-LKk7c6LsBRA/UV4OxEpd7VI/AAAAAAAAD-M/v2nBedVdFA4/s1600/test.png" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="301" src="http://1.bp.blogspot.com/-LKk7c6LsBRA/UV4OxEpd7VI/AAAAAAAAD-M/v2nBedVdFA4/s400/test.png" width="400"&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Example from my adsl line.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;&lt;span class="c"&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class="c"&gt; &lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pexpect&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;br&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;ADDR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"192.168.2.1"&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;PASS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"xxxxxxx"&lt;/span&gt; #&amp;lt;- here password&lt;br&gt;&lt;br&gt;&lt;span class="c"&gt;#retrieve values via telnet&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'telnet &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;ADDR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;': '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;': '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ras&amp;gt; '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;UP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logfile_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UP&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'wan adsl linedata far'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ras&amp;gt; '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;DOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logfile_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DOWN&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'wan adsl linedata near'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ras&amp;gt; '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'exit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;UP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;DOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;DOWN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_data_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;useableChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0123456789abcdef'&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tone'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;':'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;            &lt;br&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;useableChars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;dup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_data_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;ddown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_data_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOWN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="c"&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ddown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;br&gt;&lt;span class="nb"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ddown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;15.0&lt;/span&gt;&lt;br&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;TONE_WIDTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;4.3125&lt;/span&gt; &lt;span class="c"&gt;#kHz&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;x_axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;TONE_WIDTH&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;pup&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_axis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;TONE_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;pdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_axis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ddown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TONE_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DSL tones'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;yticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bit/chan"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"freq [kHz]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pup&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pdown&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Up'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Down'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;</description><guid>http://weigl-io.blogspot.com/posts/201304a-little-python-script-to-visualize.html</guid><pubDate>Fri, 05 Apr 2013 00:04:00 GMT</pubDate></item><item><title>Craigsche Interpolationslemma</title><link>http://weigl-io.blogspot.com/posts/201210craigsche-interpolationslemma.html</link><description>&lt;br&gt;&lt;span style="font-size: small;"&gt;&lt;b&gt;Satz:&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Seien $A,B$ zwei aussagenlogische Formeln und es gilt&lt;br&gt; $\models A \Rightarrow B$ (Tautologie), dann existiert eine aussagenlogische Formeln $C$, sodass&lt;br&gt;&lt;br&gt;\begin{equation}&lt;br&gt;&lt;br&gt;\models A \Rightarrow C \text{ und } \models C \Rightarrow B&lt;br&gt;&lt;br&gt;\end{equation}&lt;br&gt;&lt;br&gt;wobei $C$ nur aus Konstanten $w,f$ und gemeinsamen Atome von $A,B$ besteht.&lt;br&gt;&lt;br&gt;&lt;b&gt;Beispiel:&lt;/b&gt; Nehmen wir an, dass $A := p \wedge q$ und $B:= q \vee r$. Dann ist  $C := q$.&lt;br&gt;&lt;br&gt;Testen wir die Tautologien:&lt;br&gt;&lt;br&gt;\begin{equation}&lt;br&gt;p \wedge q \Rightarrow q \equiv  \neg p \vee \neg q \vee q \equiv w&lt;br&gt;\end{equation}&lt;br&gt;&lt;br&gt;\begin{equation}&lt;br&gt;q  \Rightarrow q \vee r \equiv  \neg q \vee q \vee r \equiv w&lt;br&gt;\end{equation}&lt;br&gt;&lt;b&gt;Beweis (konstrutiv):&lt;/b&gt; &lt;br&gt;&lt;br&gt;&lt;i&gt;Erster Teil ($\models A \Rightarrow C$). &lt;/i&gt;Sei $C$ eine Disjunktion wie folgt:&lt;br&gt;&lt;br&gt;\begin{equation}&lt;br&gt;C := \bigvee A[c_1,\ldots, c_n]&lt;br&gt;\end{equation}&lt;br&gt;&lt;br&gt;dabei ersetzen wir die Atome $P_1, \ldots, P_n$ aus $A$, die &lt;b&gt;nicht&lt;/b&gt; in $B$ vorkommen durch alle möglichen Kombinationen von Konstanten $c_1,\ldots,c_n \in \{w,f\}$. Für jede Interpretation $I$ mit $val_I(A) = w$ gilt: $val_I(C)=w$. Denn in der Disjunktion $C$ taucht jede mögliche Kombination der Wahrheitswerte von $P_i$ auf. Der Term der Disjunktion der $C$ wahr macht ist dieser mit:&lt;br&gt;&lt;br&gt;\begin{equation}&lt;br&gt; A[c_1, \ldots, c_n] \text{mit } c_i = val_I(P_i)&lt;br&gt;\end{equation}&lt;br&gt;&lt;br&gt;&lt;i&gt;Zweiter Teil ($\models C \Rightarrow B$). &lt;/i&gt;&lt;br&gt;&lt;br&gt;Sei $I$ eine Interpretation mit $val_I(C) = w$. Dann ist mind. ein Term der Disjunktion wahr. Wir konstruieren eine Hilfeinterpretation $J$ wie folgt:&lt;br&gt;&lt;br&gt;&lt;br&gt;\begin{equation}&lt;br&gt;J(P) = \begin{cases}&lt;br&gt; c_i &amp;amp; \colon  P = P_i \text{ für } 1\le i \le n \\&lt;br&gt;I(P) &amp;amp; \colon \text{ sonst}&lt;br&gt;\end{cases} &lt;br&gt;\end{equation}&lt;br&gt;&lt;br&gt;$J$ ist ein Modell von $C$ und $A$. Nach Vorrausetzung ($A \Rightarrow B$) folgt $val_J(B) = w$. Für alle Atome in $B$ trifft die Interpretation $J$ die gleiche Aussage wie $I$. ($P_i$ waren die Atome aus $P_i \in A \wedge P_i \notin B$). Also folgt $val_I(B) = w$.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Beispiel:&lt;/b&gt; Zurück zu unseren Beispiel. Wie konstruieren das $C$ nun nachdem Beweis:&lt;br&gt;&lt;br&gt;&lt;br&gt;\begin{equation}&lt;br&gt;C := A[p=0] \vee A[p=1] \equiv (0 \wedge q) \vee (1 \wedge q) \equiv q&lt;br&gt;\end{equation} &lt;br&gt;&lt;br&gt;</description><category>FormaleSysteme</category><category>KIT</category><guid>http://weigl-io.blogspot.com/posts/201210craigsche-interpolationslemma.html</guid><pubDate>Fri, 19 Oct 2012 21:10:00 GMT</pubDate></item><item><title>Organizing Music</title><link>http://weigl-io.blogspot.com/posts/201210organizing-musc.html</link><description>&lt;div&gt;Do want to reorganize your music collection, but Amarok or other players are to hard wired? I got this problem with LP from different artists, that would be spread other the whole collection. So here is a  little script for reorganizing music collection, based on the database written by rhythmbox.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It tries to determine, if an album is a anthology of different artists and put this in:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;   $music/&amp;lt;album&amp;gt;/&lt;span style="line-height: 16px;"&gt;$track - $artist - $album - $title.$suffix&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="line-height: 16px;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="line-height: 16px;"&gt;rather than albums from one artists:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="line-height: 16px;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="line-height: 16px;"&gt;   $music/&amp;lt;artist&amp;gt;/&amp;lt;album&amp;gt;/&lt;/span&gt;&lt;span style="line-height: 16px;"&gt;$track - $artist - $album - $title.$suffix.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;Feel free to modify. This version do not copy or move the files. It creates hard links.&lt;br&gt;&lt;br&gt;&lt;div class="highlight" style="background: #f8f8f8;"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #408080; font-style: italic;"&gt;#!/usr/bin/python3&lt;/span&gt;&lt;br&gt;&lt;span style="color: #408080; font-style: italic;"&gt;# -*- encoding: utf-8 -*- &lt;/span&gt;&lt;/pre&gt;&lt;pre style="line-height: 125%;"&gt;&lt;/pre&gt;&lt;pre style="line-height: 125%;"&gt;__author__  = "Alexander Weigl &amp;lt;alexweigl@gmail.com&amp;gt;"&lt;/pre&gt;&lt;pre style="line-height: 125%;"&gt;__license__ = "cc-by-sa 3.0"&lt;br&gt;__date__    = "2012-10-02"&lt;/pre&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span style="color: green; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: blue; font-weight: bold;"&gt;os&lt;/span&gt; &lt;span style="color: #666666;"&gt;,&lt;/span&gt; &lt;span style="color: blue; font-weight: bold;"&gt;os.path&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: blue; font-weight: bold;"&gt;sys&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;from&lt;/span&gt; &lt;span style="color: blue; font-weight: bold;"&gt;string&lt;/span&gt; &lt;span style="color: green; font-weight: bold;"&gt;import&lt;/span&gt; Template&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;from&lt;/span&gt; &lt;span style="color: blue; font-weight: bold;"&gt;urllib.parse&lt;/span&gt; &lt;span style="color: green; font-weight: bold;"&gt;import&lt;/span&gt; unquote&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;from&lt;/span&gt; &lt;span style="color: blue; font-weight: bold;"&gt;lxml&lt;/span&gt; &lt;span style="color: green; font-weight: bold;"&gt;import&lt;/span&gt; etree&lt;br&gt;&lt;br&gt;PREFIX &lt;span style="color: #666666;"&gt;=&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;"file://"&lt;/span&gt;&lt;br&gt;RHYTHMDB &lt;span style="color: #666666;"&gt;=&lt;/span&gt; os&lt;span style="color: #666666;"&gt;.&lt;/span&gt;path&lt;span style="color: #666666;"&gt;.&lt;/span&gt;expanduser(&lt;span style="color: #ba2121;"&gt;"~/.local/share/rhythmbox/rhythmdb.xml"&lt;/span&gt;)&lt;br&gt;MUSIC_PATH &lt;span style="color: #666666;"&gt;=&lt;/span&gt; os&lt;span style="color: #666666;"&gt;.&lt;/span&gt;path&lt;span style="color: #666666;"&gt;.&lt;/span&gt;expanduser(&lt;span style="color: #ba2121;"&gt;"~/tmp/musc"&lt;/span&gt;)&lt;br&gt;TEMPLATE &lt;span style="color: #666666;"&gt;=&lt;/span&gt; Template(&lt;span style="color: #ba2121;"&gt;"$track - $artist - $album - $title.$suffix"&lt;/span&gt;)&lt;br&gt;VERBOSE &lt;span style="color: #666666;"&gt;=&lt;/span&gt; &lt;span style="color: green;"&gt;True&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: blue;"&gt;mkdir&lt;/span&gt;(p):&lt;br&gt;&lt;span style="color: #ba2121; font-style: italic;"&gt;"""&lt;/span&gt;&lt;br&gt;&lt;span style="color: #ba2121; font-style: italic;"&gt;    save wrapper for os.mkdir&lt;/span&gt;&lt;br&gt;&lt;span style="color: #ba2121; font-style: italic;"&gt;    """&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;try&lt;/span&gt;: &lt;br&gt;        os&lt;span style="color: #666666;"&gt;.&lt;/span&gt;makedirs(p)&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;except&lt;/span&gt; &lt;span style="color: #d2413a; font-weight: bold;"&gt;OSError&lt;/span&gt; &lt;span style="color: green; font-weight: bold;"&gt;as&lt;/span&gt; e:&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;print&lt;/span&gt;(e)&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;return&lt;/span&gt;&lt;br&gt;&lt;br&gt;COUNTER &lt;span style="color: #666666;"&gt;=&lt;/span&gt; &lt;span style="color: #666666;"&gt;0&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: blue;"&gt;link&lt;/span&gt;(old,new):&lt;br&gt;&lt;span style="color: #ba2121;"&gt;"wrapper for os.link"&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;global&lt;/span&gt; COUNTER&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;try&lt;/span&gt;:&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;if&lt;/span&gt; VERBOSE: &lt;span style="color: green; font-weight: bold;"&gt;print&lt;/span&gt;(&lt;span style="color: #ba2121;"&gt;"Link '&lt;/span&gt;&lt;span style="color: #bb6688; font-weight: bold;"&gt;%s&lt;/span&gt;&lt;span style="color: #ba2121;"&gt;' to '&lt;/span&gt;&lt;span style="color: #bb6688; font-weight: bold;"&gt;%s&lt;/span&gt;&lt;span style="color: #ba2121;"&gt;'"&lt;/span&gt; &lt;span style="color: #666666;"&gt;%&lt;/span&gt;( old, new)) &lt;br&gt;        os&lt;span style="color: #666666;"&gt;.&lt;/span&gt;link(old,new)&lt;br&gt;        COUNTER &lt;span style="color: #666666;"&gt;+=&lt;/span&gt; &lt;span style="color: #666666;"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;except&lt;/span&gt; &lt;span style="color: #d2413a; font-weight: bold;"&gt;OSError&lt;/span&gt; &lt;span style="color: green; font-weight: bold;"&gt;as&lt;/span&gt; e:&lt;br&gt;&lt;span style="color: #408080; font-style: italic;"&gt;#print(e)&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;pass&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: blue;"&gt;entry_to_dict&lt;/span&gt;(lis):&lt;br&gt;&lt;span style="color: #ba2121;"&gt;"translate an enty from rhymthmdb to a dictionary"&lt;/span&gt;&lt;br&gt;    d &lt;span style="color: #666666;"&gt;=&lt;/span&gt; {}&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;for&lt;/span&gt; ele &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; lis:&lt;br&gt;        d[ele&lt;span style="color: #666666;"&gt;.&lt;/span&gt;tag] &lt;span style="color: #666666;"&gt;=&lt;/span&gt; ele&lt;span style="color: #666666;"&gt;.&lt;/span&gt;text&lt;br&gt;&lt;br&gt;    d[&lt;span style="color: #ba2121;"&gt;'album'&lt;/span&gt;] &lt;span style="color: #666666;"&gt;=&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;"Unbekannt "&lt;/span&gt; &lt;span style="color: green; font-weight: bold;"&gt;if&lt;/span&gt; d[&lt;span style="color: #ba2121;"&gt;'album'&lt;/span&gt;] &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; (&lt;span style="color: green;"&gt;None&lt;/span&gt;, &lt;span style="color: #ba2121;"&gt;""&lt;/span&gt;) &lt;span style="color: green; font-weight: bold;"&gt;else&lt;/span&gt; d[&lt;span style="color: #ba2121;"&gt;'album'&lt;/span&gt;]&lt;br&gt;    d[&lt;span style="color: #ba2121;"&gt;'file'&lt;/span&gt;] &lt;span style="color: #666666;"&gt;=&lt;/span&gt; unquote( d[&lt;span style="color: #ba2121;"&gt;'location'&lt;/span&gt;][&lt;span style="color: green;"&gt;len&lt;/span&gt;(PREFIX):] )&lt;br&gt;    d[&lt;span style="color: #ba2121;"&gt;'track'&lt;/span&gt;] &lt;span style="color: #666666;"&gt;=&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;"&lt;/span&gt;&lt;span style="color: #bb6688; font-weight: bold;"&gt;%02d&lt;/span&gt;&lt;span style="color: #ba2121;"&gt;"&lt;/span&gt; &lt;span style="color: #666666;"&gt;%&lt;/span&gt; &lt;span style="color: green;"&gt;int&lt;/span&gt;(d&lt;span style="color: #666666;"&gt;.&lt;/span&gt;get(&lt;span style="color: #ba2121;"&gt;'track-number'&lt;/span&gt;,&lt;span style="color: #666666;"&gt;0&lt;/span&gt;)) &lt;span style="color: #408080; font-style: italic;"&gt;#for templating&lt;/span&gt;&lt;br&gt;    d[&lt;span style="color: #ba2121;"&gt;'suffix'&lt;/span&gt;] &lt;span style="color: #666666;"&gt;=&lt;/span&gt; d[&lt;span style="color: #ba2121;"&gt;'file'&lt;/span&gt;][&lt;span style="color: #666666;"&gt;-3&lt;/span&gt;:]&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;return&lt;/span&gt; d&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: blue;"&gt;format_song&lt;/span&gt;(s):&lt;br&gt;&lt;span style="color: #ba2121;"&gt;"return the filename for the given song"&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;return&lt;/span&gt; TEMPLATE&lt;span style="color: #666666;"&gt;.&lt;/span&gt;substitute(&lt;span style="color: #666666;"&gt;**&lt;/span&gt;s)&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: blue;"&gt;handleCollection&lt;/span&gt;(album, songs):&lt;br&gt;&lt;span style="color: #ba2121;"&gt;"handle the complete collection"&lt;/span&gt;&lt;br&gt;    albumRoot &lt;span style="color: #666666;"&gt;=&lt;/span&gt; os&lt;span style="color: #666666;"&gt;.&lt;/span&gt;path&lt;span style="color: #666666;"&gt;.&lt;/span&gt;join(MUSIC_PATH, album)&lt;br&gt;    mkdir(albumRoot)&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;for&lt;/span&gt; s &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; songs:&lt;br&gt;        new  &lt;span style="color: #666666;"&gt;=&lt;/span&gt;   os&lt;span style="color: #666666;"&gt;.&lt;/span&gt;path&lt;span style="color: #666666;"&gt;.&lt;/span&gt;join(albumRoot, format_song(s))&lt;br&gt;        old  &lt;span style="color: #666666;"&gt;=&lt;/span&gt;   s[&lt;span style="color: #ba2121;"&gt;"file"&lt;/span&gt;]        &lt;br&gt;        link(old,new)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: blue;"&gt;handleNormalAlbum&lt;/span&gt;(album,songs):&lt;br&gt;&lt;span style="color: #ba2121;"&gt;"handle the complete album"&lt;/span&gt;&lt;br&gt;    artist &lt;span style="color: #666666;"&gt;=&lt;/span&gt; songs[&lt;span style="color: #666666;"&gt;0&lt;/span&gt;][&lt;span style="color: #ba2121;"&gt;"artist"&lt;/span&gt;]&lt;br&gt;    albumRoot &lt;span style="color: #666666;"&gt;=&lt;/span&gt; os&lt;span style="color: #666666;"&gt;.&lt;/span&gt;path&lt;span style="color: #666666;"&gt;.&lt;/span&gt;join(MUSIC_PATH, artist, album)&lt;br&gt;    mkdir(albumRoot)&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;for&lt;/span&gt; s &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; songs:&lt;br&gt;        new  &lt;span style="color: #666666;"&gt;=&lt;/span&gt;   os&lt;span style="color: #666666;"&gt;.&lt;/span&gt;path&lt;span style="color: #666666;"&gt;.&lt;/span&gt;join(albumRoot, format_song(s))&lt;br&gt;        old  &lt;span style="color: #666666;"&gt;=&lt;/span&gt;   s[&lt;span style="color: #ba2121;"&gt;"file"&lt;/span&gt;]&lt;br&gt;        link(old,new)&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: blue;"&gt;is_collection&lt;/span&gt;(songs):&lt;br&gt;&lt;span style="color: #ba2121;"&gt;"True iff. the songs belong to a collection iff. the artists are different"&lt;/span&gt;&lt;br&gt;    artists &lt;span style="color: #666666;"&gt;=&lt;/span&gt; [s[&lt;span style="color: #ba2121;"&gt;"artist"&lt;/span&gt;] &lt;span style="color: green; font-weight: bold;"&gt;for&lt;/span&gt; s &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; songs]&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;for&lt;/span&gt; i &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; &lt;span style="color: green;"&gt;range&lt;/span&gt;(&lt;span style="color: green;"&gt;len&lt;/span&gt;(artists)&lt;span style="color: #666666;"&gt;-1&lt;/span&gt;):&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;if&lt;/span&gt; artists[i] &lt;span style="color: #666666;"&gt;!=&lt;/span&gt; artists[i&lt;span style="color: #666666;"&gt;+1&lt;/span&gt;]:&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span style="color: green;"&gt;True&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span style="color: green;"&gt;False&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;print&lt;/span&gt;(&lt;span style="color: #ba2121;"&gt;"Reading &lt;/span&gt;&lt;span style="color: #bb6688; font-weight: bold;"&gt;%s&lt;/span&gt;&lt;span style="color: #ba2121;"&gt;"&lt;/span&gt; &lt;span style="color: #666666;"&gt;%&lt;/span&gt; RHYTHMDB)&lt;br&gt;tree &lt;span style="color: #666666;"&gt;=&lt;/span&gt; etree&lt;span style="color: #666666;"&gt;.&lt;/span&gt;parse(RHYTHMDB)&lt;br&gt;&lt;br&gt;ALBUM &lt;span style="color: #666666;"&gt;=&lt;/span&gt; &lt;span style="color: green;"&gt;dict&lt;/span&gt;()&lt;br&gt;&lt;br&gt;&lt;span style="color: #408080; font-style: italic;"&gt;#build up album index&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;for&lt;/span&gt; entry &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; tree&lt;span style="color: #666666;"&gt;.&lt;/span&gt;getroot()&lt;span style="color: #666666;"&gt;.&lt;/span&gt;getchildren():&lt;br&gt;    song &lt;span style="color: #666666;"&gt;=&lt;/span&gt; entry_to_dict(entry)&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;try&lt;/span&gt;:&lt;br&gt;        ALBUM[song[&lt;span style="color: #ba2121;"&gt;"album"&lt;/span&gt;]]&lt;span style="color: #666666;"&gt;.&lt;/span&gt;append( song )&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;except&lt;/span&gt; &lt;span style="color: #d2413a; font-weight: bold;"&gt;KeyError&lt;/span&gt;:&lt;br&gt;        ALBUM[song[&lt;span style="color: #ba2121;"&gt;"album"&lt;/span&gt;]] &lt;span style="color: #666666;"&gt;=&lt;/span&gt; [ song ]&lt;br&gt;&lt;br&gt;&lt;br&gt;mkdir(MUSIC_PATH)&lt;br&gt;&lt;br&gt;&lt;span style="color: #408080; font-style: italic;"&gt;#for each album, handle it appropriate&lt;/span&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;for&lt;/span&gt; k &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; &lt;span style="color: green;"&gt;list&lt;/span&gt;(ALBUM&lt;span style="color: #666666;"&gt;.&lt;/span&gt;keys()):&lt;br&gt;    songs &lt;span style="color: #666666;"&gt;=&lt;/span&gt; ALBUM[k]&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;if&lt;/span&gt; is_collection(songs):&lt;br&gt;        handleCollection(k,songs)&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;else&lt;/span&gt;:&lt;br&gt;        handleNormalAlbum(k,songs)&lt;br&gt;&lt;br&gt;&lt;span style="color: green; font-weight: bold;"&gt;print&lt;/span&gt;(&lt;span style="color: #ba2121;"&gt;"Linked &lt;/span&gt;&lt;span style="color: #bb6688; font-weight: bold;"&gt;%d&lt;/span&gt;&lt;span style="color: #ba2121;"&gt; files"&lt;/span&gt; &lt;span style="color: #666666;"&gt;%&lt;/span&gt; COUNTER)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;</description><guid>http://weigl-io.blogspot.com/posts/201210organizing-musc.html</guid><pubDate>Tue, 02 Oct 2012 11:10:00 GMT</pubDate></item><item><title>the latex flow</title><link>http://weigl-io.blogspot.com/posts/201207latex-flow.html</link><description>&lt;p&gt;I see many of students, who does not get a good (work) flow in LaTeX. Maybe these tips help you. &lt;br&gt;&lt;/p&gt;&lt;h3&gt;Good packages&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;showkeys &lt;/b&gt;-- shows the reference keys in \ref and \label statements. A good choice if you use many of them.&lt;/li&gt;&lt;li&gt;&lt;b&gt;todonotes&lt;/b&gt; -- provides one nice command &lt;span&gt;\todo&lt;/span&gt;. This command prints a note on the side and with \&lt;span&gt;listoftodoes&lt;/span&gt; you get an index of all todos in the document. &lt;br&gt;I use the following shortcuts:&lt;span style="font-size: x-small;"&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;\renewcommand\question[1]{\todo[inline,color=orange!40]{#1}}&lt;/span&gt;&lt;br&gt;&lt;span&gt;\newcommand{\insertref}[1]{\todo[color=green!40]{#1}}&lt;/span&gt;&lt;br&gt;&lt;span&gt;\newcommand{\explainindetail}[1]{\todo[inline,color=red!40]{#1}}&lt;/span&gt;&lt;br&gt;&lt;span&gt;\newcommand{\beforepublish}[1]{\todo[inline,color=blue!40]{\textbf{before&lt;/span&gt;&lt;br&gt;&lt;span&gt;publish:} #1}}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;array&lt;/b&gt; -- for simplier definition of tables formats, especially p{5cm} defines a row width of 5cm and text wrapping.&lt;/li&gt;&lt;li&gt;&lt;b&gt;mathtools&lt;/b&gt; -- provides many fixes and new commands for typesetting math.&lt;/li&gt;&lt;li&gt;&lt;b&gt;nomencl&lt;/b&gt; -- for setting a nomenclature (e. g. short definitions)&lt;/li&gt;&lt;li&gt;&lt;b&gt;microtype&lt;/b&gt; -- only needed to include, makes a better typesetting&lt;/li&gt;&lt;li&gt;&lt;b&gt;xcolor&lt;/b&gt; -- provides more color names&lt;/li&gt;&lt;li&gt;&lt;b&gt;multicolumn &lt;/b&gt;-- try this for setting only one paragraph with multicolumns&lt;/li&gt;&lt;li&gt;&lt;b&gt;flafter&lt;/b&gt; -- this depends on your revisior. In my unviversity the floats should be after the first occurence in the text. This package forces this.&lt;/li&gt;&lt;li&gt;&lt;b&gt;algorithm2e &lt;/b&gt;-- The mighty package for setting algorithms in LaTeX. If you does not love the syntax you should consider &lt;b&gt;algorithmic&lt;/b&gt;.&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;b&gt; &lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;b&gt;hyperref&lt;/b&gt; -- a must use for pdf users, generates pdf index and clickable referencen (and much more ...)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Create new commands and environments.&lt;span style="font-size: x-small;"&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;span&gt;It is often useful that you create new comamnds for your needs.  I create shortcuts for often uses phrases and notations. There are two problems with writing new commands.  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;span&gt;(1) You want to use the commands within or without math mode&lt;br&gt;(2) The leading space or non-leading space after the commands. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Solution: &lt;/b&gt;For (1), use \ensuremath{} this put everything of the first parameter into math mode, independent of the outer mode. (2) is the target of the package &lt;b&gt;xspace&lt;/b&gt;.  This provdes the \xspace command, that only prints a whitespace is not an punctation.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Example:&lt;/b&gt; For Big-O Notation I use:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;     \newcommand\Oh[1]{\ensuremath{\mathcal O(#1)}}&lt;br&gt;     \newcommand\mathdef{\ensuremath{=_{\text{\textup{def}}}}}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;&lt;span&gt;You can use \Oh{n^3} in the middle of the text or in math mode. and a good symbol for mathematical definition. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;span style="font-size: x-small;"&gt;     \newcommand\IF{\textsc{if}\xspace}&lt;br&gt;     \newcommand\FOREACH{\textsc{foreach}\xspace}&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;I often write \FOREACH-Bedingung and so on. You can view the syntax of (re)newcommand and (re)newenvironment on every latex webpage. In my papers I typeset a lot things in teletype writer, but this looks very big. So I use that: &lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;    \newcommand{\f}[1]{\begingroup \smaller \texttt{#1} \endgroup}&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span style="font-size: x-small;"&gt;&lt;span&gt;Mathematical Operator should be declared with \DeclareMathOperator{\first}{first} and written as $\first$ and not $first$. The second means this is one or more variables (variables are always italic). If you use an operator only once, you can consider \operatorname{first}. In my thesis I have defined the following operators:&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style="font-size: x-small;"&gt;    \DeclareMathOperator{\Pol}{Pol}&lt;br&gt;    \DeclareMathOperator{\BC}{BC}&lt;br&gt;    \DeclareMathOperator{\co}{co}&lt;br&gt;    \DeclareMathOperator{\BFS}{BFS}&lt;br&gt;    \DeclareMathOperator{\ZK}{ZK}&lt;br&gt;    \DeclareMathOperator{\sZK}{sZK}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;h3&gt;Environments &lt;/h3&gt;A short time ago I read a paper of student for &lt;i&gt;Wissenschaftliches Arbeiten&lt;/i&gt;, a lecture on my university. There was a lot of definition, propositions and other things. But not typeset in an appropriate manner. Everything that should be reference or needed later in an article should get a number in a suitable environment. AMS-Math provides for this some environments: proposition, corollar, problem, definition and should be labelled and used. An example:&lt;br&gt;&lt;div&gt;&lt;span style="font-size: xx-small;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-size: xx-small;"&gt;&lt;span&gt;  \begin{definition}[Sternfreie Sprachen]&lt;/span&gt;&lt;br&gt;&lt;span&gt;    \label{def:sf}&lt;/span&gt;&lt;br&gt;&lt;span&gt;    Sei $\Sigma$ ein Alphabet. Die sternfreien Sprachen über $\Sigma$, geschrieben $SF_\Sigma$ &lt;/span&gt;&lt;br&gt;&lt;span&gt;    bilden die kleinste Klasse von Sprachen über $\Sigma$, die unter folgendem abgeschlossen ist:&lt;/span&gt;&lt;br&gt;&lt;span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span&gt;     \begin{itemize}&lt;/span&gt;&lt;br&gt;&lt;span&gt;        \item $\emptyset$ ist sternfrei&lt;/span&gt;&lt;br&gt;&lt;span&gt;        \item $\{\varepsilon\}$ ist sternfrei&lt;/span&gt;&lt;br&gt;&lt;span&gt;        \item $\{a\}$ ist sternfrei für $a\in \Sigma$&lt;/span&gt;&lt;br&gt;&lt;span&gt;        \item Sind $L, L'$ sternfrei, so auch $L \cdot L', \widebar L, L \cup L'$&lt;/span&gt;&lt;br&gt;&lt;span&gt;    \end{itemize}&lt;/span&gt;&lt;br&gt;&lt;span&gt;  \end{definition}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;In my thesis I came to &lt;b&gt;thmtools&lt;/b&gt; because I wanted an index of all my definitions and theorems. &lt;br&gt;&lt;br&gt;&lt;h3&gt;Tools&lt;/h3&gt;My current editor of choice is emacs + auctex. It has  a steep learning curve but the best features I have seen so far. I know a lot of people using LaTeX-Maker or LaTeX-Studio. These are nice but I miss:&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;hard wraps (align-mode)&lt;/li&gt;&lt;li&gt;searchable references view with a kind of intellisense autocompletion&lt;/li&gt;&lt;li&gt;flyspell&lt;/li&gt;&lt;li&gt;easy shortcuts for math symbols &lt;/li&gt;&lt;li&gt;C-c C-e for new environment&lt;/li&gt;&lt;li&gt;... &lt;/li&gt;&lt;/ul&gt;For compiling my sources I take latexmk. This makes a lot of things easier. It calls bibtex if needed. Checks if the document is needed to compile again. You can plugin your file conversions easily, too. I use it in the continous mode (-pvc -pdf). This starts a recompilation every time one of the source files are changed (tex, images ... ). A difficult point is the creation of pictures for an article. In my opinion produce the &lt;b&gt;tikz&lt;/b&gt; good results but is too hard to learn and use. I use this only for small picture. For complex ones is inkscape my choice. This is an editor for vector graphics can save the images as PDF. This is important for avoid quality losses in resizing images in latex. I use two screens for editing. On the big screen is the emacs editor with multiple buffers (one or two files and table of contents). The small screen contains a pdf viewer (evince), that refresh the view if the pdf is changed and often an terminal, for things like git or latexmk.&lt;br&gt;&lt;br&gt;I work with git and dropbox. The first is for revision and tracking changes, the last only for backup and access for other people. &lt;br&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br&gt;&lt;/h3&gt;&lt;br&gt;</description><category>latex fh-trier workflow</category><guid>http://weigl-io.blogspot.com/posts/201207latex-flow.html</guid><pubDate>Sun, 15 Jul 2012 03:07:00 GMT</pubDate></item><item><title>Bewerbung M.Sc CS</title><link>http://weigl-io.blogspot.com/posts/201206bewerbung-msc-cs.html</link><description>&lt;p&gt;Man bemerkt schön, wie sich die unterschiedlichen LHGs sich auf die Online-Bewerbungsformulare niederschlagen. Bei der Uni Koblenz taucht dann sowas auf:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-J5PEZRNP3oY/T-cc4hGX5eI/AAAAAAAAB_Q/ed1Fn3Dlv3I/s1600/Bildschirmfoto+vom+2012-06-24+15:50:13.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="54" src="http://4.bp.blogspot.com/-J5PEZRNP3oY/T-cc4hGX5eI/AAAAAAAAB_Q/ed1Fn3Dlv3I/s320/Bildschirmfoto+vom+2012-06-24+15:50:13.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><guid>http://weigl-io.blogspot.com/posts/201206bewerbung-msc-cs.html</guid><pubDate>Sun, 24 Jun 2012 14:06:00 GMT</pubDate></item><item><title>NO_TITLE</title><link>http://weigl-io.blogspot.com/posts/201206i-love-pythonbecause-it-is-right.html</link><description>&lt;p&gt;I love Python,because it is right sometimes:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote class="tr_bq"&gt;AssertionError: False is not true&lt;/blockquote&gt;&lt;br&gt;A nice message of a positive test case.</description><guid>http://weigl-io.blogspot.com/posts/201206i-love-pythonbecause-it-is-right.html</guid><pubDate>Mon, 04 Jun 2012 23:06:00 GMT</pubDate></item><item><title>NO_TITLE</title><link>http://weigl-io.blogspot.com/posts/201205now-my-latexmkrc-ist-complete-for-my.html</link><description>&lt;p&gt;Now my latexmkrc ist complete for my thesis I post it. It is adopted to my workflow and uses Incskape, Graphviz for figure creation and works with nomencl package&lt;br&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;# $HOME/.latexmkrc &lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;$pdf_previewer = "start evince";&lt;br&gt;$pdf_update_method = 0;&lt;br&gt;&lt;br&gt;add_cus_dep( "svg", "pdf", 1, 'svg2pdf');&lt;br&gt;add_cus_dep( "dot", "pdf", 1, 'dot2pdf');&lt;br&gt;add_cus_dep( "nlo", "nls", 1, 'nomencl');&lt;br&gt;&lt;br&gt;&lt;br&gt;sub svg2pdf {&lt;br&gt;    system("inkscape  $_[0].svg -A $_[0].pdf --export-area-drawing --export-dpi=600");&lt;br&gt;}&lt;br&gt;&lt;br&gt;sub dot2pdf {&lt;br&gt;    system("dot -Tpdf -o $_[0].pdf   $_[0].dot");&lt;br&gt;}&lt;br&gt;&lt;br&gt;sub nomencl {&lt;br&gt;    system("makeindex $_[0].nlo -s nomencl.ist -o $_[0].nls");&lt;br&gt;} &lt;/span&gt;&lt;/p&gt;</description><guid>http://weigl-io.blogspot.com/posts/201205now-my-latexmkrc-ist-complete-for-my.html</guid><pubDate>Mon, 21 May 2012 16:05:00 GMT</pubDate></item></channel></rss>